/*
    Copyright 2020-2021. Huawei Technologies Co., Ltd. All rights reserved.

    Licensed under the Apache License, Version 2.0 (the "License")
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var HMSInAppPurchases = /** @class */ (function (_super) {
    __extends(HMSInAppPurchases, _super);
    function HMSInAppPurchases() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HMSInAppPurchases.prototype.isEnvReady = function () { return cordova(this, "isEnvReady", { "otherPromise": true }, arguments); };
    HMSInAppPurchases.prototype.isSandboxActivated = function () { return cordova(this, "isSandboxActivated", { "otherPromise": true }, arguments); };
    HMSInAppPurchases.prototype.obtainOwnedPurchases = function (obtainOwnedPurchasesReq) { return cordova(this, "obtainOwnedPurchases", { "otherPromise": true }, arguments); };
    HMSInAppPurchases.prototype.obtainProductInfo = function (product) { return cordova(this, "obtainProductInfo", { "otherPromise": true }, arguments); };
    HMSInAppPurchases.prototype.createPurchaseIntent = function (purchaseIntentReq) { return cordova(this, "createPurchaseIntent", { "otherPromise": true }, arguments); };
    HMSInAppPurchases.prototype.consumeOwnedPurchase = function (consumeOwnedPurchaseReq) { return cordova(this, "consumeOwnedPurchase", { "otherPromise": true }, arguments); };
    HMSInAppPurchases.prototype.obtainOwnedPurchaseRecord = function (obtainOwnedPurchaseRecordReq) { return cordova(this, "obtainOwnedPurchaseRecord", { "otherPromise": true }, arguments); };
    HMSInAppPurchases.prototype.startIapActivity = function (startIapActivityReq) { return cordova(this, "startIapActivity", { "otherPromise": true }, arguments); };
    HMSInAppPurchases.pluginName = "HMSInAppPurchases";
    HMSInAppPurchases.plugin = "cordova-plugin-hms-iap";
    HMSInAppPurchases.pluginRef = "HMSInAppPurchases";
    HMSInAppPurchases.platforms = ["Android"];
    HMSInAppPurchases = __decorate([
        Injectable()
    ], HMSInAppPurchases);
    return HMSInAppPurchases;
}(IonicNativePlugin));
export { HMSInAppPurchases };
;
;
;
;
//# sourceMappingURL=data:application/json;base64,