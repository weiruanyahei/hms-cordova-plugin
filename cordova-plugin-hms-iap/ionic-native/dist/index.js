/*
    Copyright 2020-2021. Huawei Technologies Co., Ltd. All rights reserved.

    Licensed under the Apache License, Version 2.0 (the "License")
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var HMSInAppPurchasesOriginal = /** @class */ (function (_super) {
    __extends(HMSInAppPurchasesOriginal, _super);
    function HMSInAppPurchasesOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HMSInAppPurchasesOriginal.prototype.isEnvReady = function () { return cordova(this, "isEnvReady", { "otherPromise": true }, arguments); };
    HMSInAppPurchasesOriginal.prototype.isSandboxActivated = function () { return cordova(this, "isSandboxActivated", { "otherPromise": true }, arguments); };
    HMSInAppPurchasesOriginal.prototype.obtainOwnedPurchases = function (obtainOwnedPurchasesReq) { return cordova(this, "obtainOwnedPurchases", { "otherPromise": true }, arguments); };
    HMSInAppPurchasesOriginal.prototype.obtainProductInfo = function (product) { return cordova(this, "obtainProductInfo", { "otherPromise": true }, arguments); };
    HMSInAppPurchasesOriginal.prototype.createPurchaseIntent = function (purchaseIntentReq) { return cordova(this, "createPurchaseIntent", { "otherPromise": true }, arguments); };
    HMSInAppPurchasesOriginal.prototype.consumeOwnedPurchase = function (consumeOwnedPurchaseReq) { return cordova(this, "consumeOwnedPurchase", { "otherPromise": true }, arguments); };
    HMSInAppPurchasesOriginal.prototype.obtainOwnedPurchaseRecord = function (obtainOwnedPurchaseRecordReq) { return cordova(this, "obtainOwnedPurchaseRecord", { "otherPromise": true }, arguments); };
    HMSInAppPurchasesOriginal.prototype.startIapActivity = function (startIapActivityReq) { return cordova(this, "startIapActivity", { "otherPromise": true }, arguments); };
    HMSInAppPurchasesOriginal.pluginName = "HMSInAppPurchases";
    HMSInAppPurchasesOriginal.plugin = "cordova-plugin-hms-iap";
    HMSInAppPurchasesOriginal.pluginRef = "HMSInAppPurchases";
    HMSInAppPurchasesOriginal.platforms = ["Android"];
    return HMSInAppPurchasesOriginal;
}(IonicNativePlugin));
var HMSInAppPurchases = new HMSInAppPurchasesOriginal();
export { HMSInAppPurchases };
;
;
;
;
//# sourceMappingURL=data:application/json;base64,