{"version":3,"file":"HMSAnalytics.js","sourceRoot":"","sources":["../src/www/HMSAnalytics.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n    Copyright 2020-2021. Huawei Technologies Co., Ltd. All rights reserved.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\")\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n        https://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\nimport { asyncExec } from './utils'\r\n\r\n///////////////////////////////////////////////////////////////////////////\r\n// HMSAnalytics\r\n///////////////////////////////////////////////////////////////////////////\r\n\r\nconst HMSAnalytics: string = 'HMSAnalytics';\r\nconst HMSAnalyticsModule: string = 'HMSAnalyticsModule';\r\n\r\n/**\r\n * Specifies whether to enable event logging.\r\n * The default value is true.\r\n * <p>\r\n * If event logging is disabled, no data is recorded or analyzed.\r\n * \r\n * @param enabled : Indicates whether to enable event logging.\r\n */\r\nexport function setAnalyticsEnabled(enabled:boolean): Promise<void> {\r\n\treturn asyncExec(HMSAnalytics, HMSAnalyticsModule, ['setAnalyticsEnabled',{'enabled':enabled}]);\r\n}\r\n\r\n/**\r\n * When the method is called, a new session is generated if the old value of id is not empty\r\n * and is different from the new value. If you do not want to use id to identify a user\r\n * (for example, when a user signs out), you must set id to null.\r\n *\r\n * @param id : User ID, a string containing a maximum of 256 characters.\r\n *           The value cannot be empty.\r\n *           {@param id} is used by Analytics Kit to associate user data.\r\n */\r\nexport function setUserId(userId:string): Promise<void> {\r\n\treturn asyncExec(HMSAnalytics, HMSAnalyticsModule, ['setUserId',{'userId':userId}]);\r\n}\r\n/**\r\n * Sets user attributes.\r\n * The values of user attributes remain unchanged throughout the app lifecycle and during\r\n * each session.\r\n *\r\n * @param name  :  Name of a user attribute, a string containing a maximum of 256 characters.\r\n *              The value cannot be empty. It can consist of digits, letters,\r\n *              and underscores (_) and must start with a letter.\r\n * @param value : User attribute value, a string containing a maximum of 256 characters.\r\n */\r\nexport function setUserProfile(name:string,value:string): Promise<void> {\r\n\treturn asyncExec(HMSAnalytics, HMSAnalyticsModule, ['setUserProfile',{'name':name,'value':value}]);\r\n}\r\n/**\r\n * Delete user profile.\r\n *\r\n * @param name  :  Name of a user attribute\r\n */\r\nexport function deleteUserProfile(name:string): Promise<void> {\r\n\treturn asyncExec(HMSAnalytics, HMSAnalyticsModule, ['deleteUserProfile',{'name':name}]);\r\n}\r\n\r\n/**\r\n * Sets the push token. After obtaining a push token through Push Kit, call this method\r\n * to save the push token so that you can use the audience defined by Analytics Kit\r\n * to create HCM notification tasks.\r\n *\r\n * @param token : Push token, a string containing a maximum of 256 characters.\r\n *              The value cannot be empty.\r\n * \r\n * @note This method is only to support on Android Platform.\r\n */\r\nexport function setPushToken(token:string): Promise<void> {\r\n\treturn asyncExec(HMSAnalytics, HMSAnalyticsModule, ['setPushToken',{'token':token}]);\r\n}\r\n\r\n/**\r\n * Sets the minimum interval for starting a new session.\r\n * A new session is generated when an app is switched back to the foreground after it\r\n * runs in the background for the specified minimum interval.\r\n * <p>\r\n * By default, the minimum interval is 30,000 milliseconds (that is, 30 seconds).\r\n *\r\n * @param milliseconds : Minimum interval for starting a session, in milliseconds.\r\n * \r\n * @note This method is only to support on Android Platform.\r\n */\r\nexport function setMinActivitySessions(milliseconds:number): Promise<void> {\r\n\treturn asyncExec(HMSAnalytics, HMSAnalyticsModule, ['setMinActivitySessions',{'milliseconds':milliseconds}]);\r\n}\r\n\r\n/**\r\n * Sets the session timeout interval.\r\n * A new session is generated when an app is running in the foreground but\r\n * the interval between two adjacent events exceeds the specified timeout interval.\r\n * By default, the timeout interval is 1,800,000 milliseconds (that is, 30 minutes).\r\n *\r\n * @param milliseconds : Session timeout interval, in milliseconds.\r\n */\r\nexport function setSessionDuration(milliseconds:number): Promise<void> {\r\n\treturn asyncExec(HMSAnalytics, HMSAnalyticsModule, ['setSessionDuration',{'milliseconds':milliseconds}]);\r\n}\r\n\r\n/**\r\n * Records an event.\r\n *\r\n * @param eventId : Event ID, a string containing a maximum of 256 characters.\r\n *                The value cannot be empty or the ID of an automatically collected event.\r\n *                It can consist of digits, letters, and underscores (_) but cannot contain\r\n *                spaces or start with a digit.\r\n * @param params  :  Information carried in an event. The number of built-in key-value pairs\r\n */\r\nexport function onEvent(eventId: HAEventType | string, params: HAParamType | EventParams): Promise<void> {\r\n\treturn asyncExec(HMSAnalytics, HMSAnalyticsModule, ['onEvent',{'eventId':eventId,'params':params}]);\r\n}\r\n\r\n/**\r\n * Clears all collected data cached locally, including cached data that failed to be sent.\r\n */\r\nexport function clearCachedData(): Promise<void> {\r\n\treturn asyncExec(HMSAnalytics, HMSAnalyticsModule, ['clearCachedData']);\r\n}\r\n\r\n/**\r\n * Obtains the app instance ID from AppGallery Connect.\r\n */\r\nexport function getAAID(): Promise<string> {\r\n\treturn asyncExec(HMSAnalytics, HMSAnalyticsModule, ['getAAID']);\r\n}\r\n\r\n/**\r\n * Obtains the automatically collected or custom user attributes.\r\n *\r\n * @param preDefined : Indicates whether to obtain the automatically collected or\r\n *                   custom user attributes.\r\n */\r\nexport function getUserProfiles(predefined:boolean): Promise<UserProfiles> {\r\n\treturn asyncExec(HMSAnalytics, HMSAnalyticsModule, ['getUserProfiles',{'predefined':predefined}]);\r\n}\r\n\r\n/**\r\n * Customizes a page entry event.\r\n * This method applies only to non-activity pages because automatic collection is supported\r\n * for activity pages. If it is called for an activity page,\r\n * statistics on page entry and exit events will be inaccurate.\r\n * <p>\r\n * After this method is called, the pageEnd() API must be called.\r\n *\r\n * @param pageName          :          Name of the current page,\r\n *                          a string containing a maximum of 256 characters.\r\n * @param pageClassOverride : Class name of the current page,\r\n *                          a string containing a maximum of 256 characters.\r\n * \r\n * @note This method is only to support on Android Platform.\r\n */\r\nexport function pageStart(pageName:string,pageClassOverride:string): Promise<void> {\r\n\treturn asyncExec(HMSAnalytics, HMSAnalyticsModule, ['pageStart',{'pageName':pageName,'pageClassOverride':pageClassOverride}]);\r\n}\r\n\r\n/**\r\n * Customizes a page end event.\r\n * This method applies only to non-activity pages because automatic collection is supported\r\n * for activity pages. If it is called for an activity page,\r\n * statistics on page entry and exit events will be inaccurate.\r\n * <p>\r\n * Before this method is called, the pageStart() API must be called.\r\n *\r\n * @param pageName : Name of the current page,\r\n *                 a string containing a maximum of 256 characters.\r\n *                 It must be the same as the value of pageName passed in pageStart().\r\n * \r\n * @note This method is only to support on Android Platform.\r\n */\r\nexport function pageEnd(pageName:string): Promise<void> {\r\n\treturn asyncExec(HMSAnalytics, HMSAnalyticsModule, ['pageEnd',{'pageName':pageName}]);\r\n}\r\n\r\n/**\r\n * Sets the automatic event reporting policy.\r\n *\r\n * @param reportPolicies : Policy for data reporting. Four policies are supported.\r\n *                       One or more policies can be specified.\r\n */\r\nexport function setReportPolicies(reportPolicies:ReportPolicy): Promise<void> {\r\n\treturn asyncExec(HMSAnalytics, HMSAnalyticsModule, ['setReportPolicies',{'reportPolicies':reportPolicies}]);\r\n}\r\n\r\n/**\r\n * Obtains the threshold for event reporting.\r\n *\r\n * @param reportPolicyType : Event reporting policy name.\r\n * \r\n * @note This method is only to support on Android Platform.\r\n */\r\nexport function getReportPolicyThreshold(reportPolicyType:ReportPolicyType): Promise<number> {\r\n\treturn asyncExec(HMSAnalytics, HMSAnalyticsModule, ['getReportPolicyThreshold',{'reportPolicyType':reportPolicyType}]);\r\n}\r\n\r\n/**\r\n * Specifies whether to enable restriction of HUAWEI Analytics.\r\n * <p>\r\n * The default value is false, which indicates that HUAWEI Analytics is enabled by default.\r\n *\r\n * @param isEnabled : Indicates whether to enable restriction of HUAWEI Analytics.\r\n */\r\nexport function setRestrictionEnabled(isEnabled:boolean): Promise<void> {\r\n\treturn asyncExec(HMSAnalytics, HMSAnalyticsModule, ['setRestrictionEnabled',{'isEnabled':isEnabled}]);\r\n}\r\n\r\n/**\r\n * Obtains the restriction status of HUAWEI Analytics.\r\n */\r\nexport function isRestrictionEnabled(): Promise<boolean> {\r\n\treturn asyncExec(HMSAnalytics, HMSAnalyticsModule, ['isRestrictionEnabled']);\r\n}\r\n\r\n/**\r\n * Enables the debug log function and sets the minimum log level.\r\n * Default log level DEBUG.\r\n *\r\n * @param level : Level of recorded debug logs.\r\n * \r\n * @note This method is only to support on Android Platform.\r\n * \r\n * @note You can adjust the log level by adding arguments on iOS platform.\r\n *      The available options include -HALogLevelDebug, -HALogLevelInfo, -HALogLevelWarn, and -HALogLevelError.\r\n *      For example, if you want to set the log level to -HALogLevelDebug:\r\n *          1- Choose Product > Scheme > Edit Scheme from the Xcode menu.\r\n *          2- On the Arguments page, click + to add the -HALogLevelDebug parameter.\r\n */\r\nexport function enableLog(logLevel:LogLevelType=LogLevelType.DEBUG): Promise<void> {\r\n\treturn asyncExec(HMSAnalytics, HMSAnalyticsModule, ['enableLog',{'logLevel':logLevel}]);\r\n}\r\n\r\n// HMSLogger\r\n\r\n/**\r\n * This method enables HMSLogger capability which is used for sending usage analytics of \r\n * Analytics SDK's methods to improve the service quality.\r\n * \r\n * @note This method is only to support on Android Platform.\r\n */\r\nexport function enableLogger(): Promise<void> {\r\n\treturn asyncExec(HMSAnalytics, HMSAnalyticsModule, ['enableLogger']);\r\n}\r\n\r\n/**\r\n * This method disables HMSLogger capability which is used for sending usage analytics of \r\n * Analytics SDK's methods to improve the service quality.\r\n * \r\n * @note This method is only to support on Android Platform.\r\n */\r\nexport function disableLogger(): Promise<void> {\r\n\treturn asyncExec(HMSAnalytics, HMSAnalyticsModule, ['disableLogger']);\r\n}\r\n\r\n///////////////////////////////////////////////////////////////\r\n// Data Types\r\n///////////////////////////////////////////////////////////////\r\ninterface GenericObject {\r\n    [key: string]: any;\r\n}\r\nexport type UserProfiles = GenericObject;\r\nexport type EventParams = GenericObject;\r\n/**\r\n * ReportPolicy types for Sets automatic event reporting policies.\r\n */\r\nexport interface ReportPolicy {\r\n    \"onScheduledTimePolicy\" ? : number,\r\n    \"onAppLaunchPolicy\" ? : boolean,\r\n    \"onMoveBackgroundPolicy\" ? : boolean,\r\n    \"onCacheThresholdPolicy\" ? : number\r\n}\r\n\r\n///////////////////////////////////////////////////////////////\r\n// Constants\r\n///////////////////////////////////////////////////////////////\r\n/**\r\n * ReportPolicy types\r\n */\r\nexport enum ReportPolicyType {\r\n    ON_SCHEDULED_TIME_POLICY = \"ON_SCHEDULED_TIME_POLICY\",\r\n    ON_APP_LAUNCH_POLICY = \"ON_APP_LAUNCH_POLICY\",\r\n    ON_MOVE_BACKGROUND_POLICY = \"ON_MOVE_BACKGROUND_POLICY\",\r\n    ON_CACHE_THRESHOLD_POLICY = \"ON_CACHE_THRESHOLD_POLICY\"\r\n}\r\n/**\r\n * HiAnalyticsTools log level enum.\r\n */\r\nexport enum LogLevelType {\r\n    DEBUG = 3,\r\n    INFO = 4,\r\n    WARN = 5,\r\n    ERROR = 6\r\n}\r\n/**\r\n * HAUserProfileType types for provides constants that define the names of all predefined user attributes.\r\n */\r\nexport enum HAUserProfileType {\r\n    USERLEVEL = \"user_level\"\r\n}\r\n/**\r\n * HAEventType types for provides the IDs of all predefined events.\r\n */\r\nexport enum HAEventType {\r\n    CREATEPAYMENTINFO = \"$CreatePaymentInfo\",\r\n    ADDPRODUCT2CART = \"$AddProduct2Cart\",\r\n    ADDPRODUCT2WISHLIST = \"$AddProduct2WishList\",\r\n    STARTAPP = \"$StartApp\",\r\n    STARTCHECKOUT = \"$StartCheckout\",\r\n    VIEWCAMPAIGN = \"$ViewCampaign\",\r\n    VIEWCHECKOUTSTEP = \"$ViewCheckoutStep\",\r\n    WINVIRTUALCOIN = \"$WinVirtualCoin\",\r\n    COMPLETEPURCHASE = \"$CompletePurchase\",\r\n    OBTAINLEADS = \"$ObtainLeads\",\r\n    JOINUSERGROUP = \"$JoinUserGroup\",\r\n    COMPLETELEVEL = \"$CompleteLevel\",\r\n    STARTLEVEL = \"$StartLevel\",\r\n    UPGRADELEVEL = \"$UpgradeLevel\",\r\n    SIGNIN = \"$SignIn\",\r\n    SIGNOUT = \"$SignOut\",\r\n    SUBMITSCORE = \"$SubmitScore\",\r\n    CREATEORDER = \"$CreateOrder\",\r\n    REFUNDORDER = \"$RefundOrder\",\r\n    DELPRODUCTFROMCART = \"$DelProductFromCart\",\r\n    SEARCH = \"$Search\",\r\n    VIEWCONTENT = \"$ViewContent\",\r\n    UPDATECHECKOUTOPTION = \"$UpdateCheckoutOption\",\r\n    SHARECONTENT = \"$ShareContent\",\r\n    REGISTERACCOUNT = \"$RegisterAccount\",\r\n    CONSUMEVIRTUALCOIN = \"$ConsumeVirtualCoin\",\r\n    STARTTUTORIAL = \"$StartTutorial\",\r\n    COMPLETETUTORIAL = \"$CompleteTutorial\",\r\n    OBTAINACHIEVEMENT = \"$ObtainAchievement\",\r\n    VIEWPRODUCT = \"$ViewProduct\",\r\n    VIEWPRODUCTLIST = \"$ViewProductList\",\r\n    VIEWSEARCHRESULT = \"$ViewSearchResult\",\r\n    UPDATEMEMBERSHIPLEVEL = \"$UpdateMembershipLevel\",\r\n    FILTRATEPRODUCT = \"$FiltrateProduct\",\r\n    VIEWCATEGORY = \"$ViewCategory\",\r\n    UPDATEORDER = \"$UpdateOrder\",\r\n    CANCELORDER = \"$CancelOrder\",\r\n    COMPLETEORDER = \"$CompleteOrder\",\r\n    CANCELCHECKOUT = \"$CancelCheckout\",\r\n    OBTAINVOUCHER = \"$ObtainVoucher\",\r\n    CONTACTCUSTOMSERVICE = \"$ContactCustomService\",\r\n    RATE = \"$Rate\",\r\n    INVITE = \"$Invite\",\r\n    NOVICEGUIDESTART = \"$NoviceGuideStart\",\r\n    NOVICEGUIDEEND = \"$NoviceGuideEnd\",\r\n    STARTGAME = \"$StartGame\",\r\n    ENDGAME = \"$EndGame\",\r\n    WINPROPS = \"$WinProps\",\r\n    CONSUMEPROPS = \"$ConsumeProps\"\r\n}\r\n/**\r\n * HAParamType types for provides the IDs of all predefined parameters, \r\n * including the IDs of predefined parameters and user attributes.\r\n */\r\nexport enum HAParamType {\r\n    STORENAME = \"$StoreName\",\r\n    BRAND = \"$Brand\",\r\n    CATEGORY = \"$Category\",\r\n    PRODUCTID = \"$ProductId\",\r\n    PRODUCTNAME = \"$ProductName\",\r\n    PRODUCTFEATURE = \"$ProductFeature\",\r\n    PRICE = \"$Price\",\r\n    QUANTITY = \"$Quantity\",\r\n    REVENUE = \"$Revenue\",\r\n    CURRNAME = \"$CurrName\",\r\n    PLACEID = \"$PlaceId\",\r\n    DESTINATION = \"$Destination\",\r\n    ENDDATE = \"$EndDate\",\r\n    BOOKINGDAYS = \"$BookingDays\",\r\n    PASSENGERSNUMBER = \"$PassengersNumber\",\r\n    BOOKINGROOMS = \"$BookingRooms\",\r\n    ORIGINATINGPLACE = \"$OriginatingPlace\",\r\n    BEGINDATE = \"$BeginDate\",\r\n    TRANSACTIONID = \"$TransactionId\",\r\n    CLASS = \"$Class\",\r\n    CLICKID = \"$ClickId\",\r\n    PROMOTIONNAME = \"$PromotionName\",\r\n    CONTENT = \"$Content\",\r\n    EXTENDPARAM = \"$ExtendParam\",\r\n    MATERIALNAME = \"$MaterialName\",\r\n    MATERIALSLOT = \"$MaterialSlot\",\r\n    MEDIUM = \"$Medium\",\r\n    SOURCE = \"$Source\",\r\n    KEYWORDS = \"$Keywords\",\r\n    OPTION = \"$Option\",\r\n    STEP = \"$Step\",\r\n    VIRTUALCURRNAME = \"$VirtualCurrName\",\r\n    VOUCHER = \"$Voucher\",\r\n    PLACE = \"$Place\",\r\n    SHIPPING = \"$Shipping\",\r\n    TAXFEE = \"$TaxFee\",\r\n    USERGROUPID = \"$UserGroupId\",\r\n    LEVELNAME = \"$LevelName\",\r\n    RESULT = \"$Result\",\r\n    ROLENAME = \"$RoleName\",\r\n    LEVELID = \"$LevelId\",\r\n    CHANNEL = \"$Channel\",\r\n    SCORE = \"$Score\",\r\n    SEARCHKEYWORDS = \"$SearchKeywords\",\r\n    CONTENTTYPE = \"$ContentType\",\r\n    ACHIEVEMENTID = \"$AchievementId\",\r\n    FLIGHTNO = \"$FlightNo\",\r\n    POSITIONID = \"$PositionId\",\r\n    PRODUCTLIST = \"$ProductList\",\r\n    ACOUNTTYPE = \"$AcountType\",\r\n    OCCURREDTIME = \"$OccurredTime\",\r\n    EVTRESULT = \"$EvtResult\",\r\n    PREVLEVEL = \"$PrevLevel\",\r\n    CURRVLEVEL = \"$CurrvLevel\",\r\n    VOUCHERS = \"$Vouchers\",\r\n    MATERIALSLOTTYPE = \"$MaterialSlotType\",\r\n    LISTID = \"$ListId\",\r\n    FILTERS = \"$Filters\",\r\n    SORTS = \"$Sorts\",\r\n    ORDERID = \"$OrderId\",\r\n    PAYTYPE = \"$PayType\",\r\n    REASON = \"$Reason\",\r\n    EXPIREDATE = \"$ExpireDate\",\r\n    VOUCHERTYPE = \"$VoucherType\",\r\n    SERVICETYPE = \"$ServiceType\",\r\n    DETAILS = \"$Details\",\r\n    COMMENTTYPE = \"$CommentType\",\r\n    REGISTMETHOD = \"$RegistMethod\",\r\n    DURATION = \"$Duration\",\r\n    LEVEL = \"$Level\",\r\n    PURCHASEENTRY = \"$PurchaseEntry\",\r\n    PROPS = \"$Props\",\r\n    ENTRY = \"$Entry\"\r\n}"]}